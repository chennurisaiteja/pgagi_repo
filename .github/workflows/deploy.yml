name: Build, Test, and Deploy to AWS ECR

on:
  push:
    branches: [main, develop]

jobs:
  build-test-deploy:
name: Build, Test, and Deploy to AWS

# ✅ Trigger on both develop and main branches
on:
  push:
    branches: [develop, main]

jobs:
  build-test-deploy:
    name: Build, Test, and Push Docker Images
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
      ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ✅ Set up Python and Run Backend Tests
      # ✅ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # ✅ Python Setup & Backend Unit Tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run backend unit tests
        run: PYTHONPATH=backend pytest backend/tests

      # ✅ Set up Node.js

      - name: Run backend unit tests
        run: PYTHONPATH=backend pytest backend/tests

      # ✅ Node.js Setup & Frontend Build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.0'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      # ✅ Run Cypress with Backend + Frontend
      # ✅ Cypress E2E tests
      - name: Run Cypress E2E tests
        run: |
          pip install -r backend/requirements.txt
          npm install --global concurrently start-server-and-test
          concurrently -k \
            "PYTHONPATH=backend python -m uvicorn app.main:app --host 0.0.0.0 --port 8000" \
            "cd frontend && npm run dev" &
          sleep 10
          cd frontend
          npx cypress run --browser chrome --spec cypress/e2e/frontend_spec.cy.js

      # ✅ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ✅ Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ✅ Build and Push Docker Images
      - name: Build and push backend Docker image
        run: |
          docker build -t $ECR_REPO_BACKEND:latest -f backend/Dockerfile ./backend
          docker push $ECR_REPO_BACKEND:latest

      - name: Build and push frontend Docker image
        run: |
          docker build -t $ECR_REPO_FRONTEND:latest -f frontend/Dockerfile ./frontend
          docker push $ECR_REPO_FRONTEND:latest

      # ✅ Terraform Deployment to ECS (backend + frontend)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infra
        run: |
          terraform apply -auto-approve \
            -var="backend_image=${{ secrets.ECR_REPO_BACKEND }}:latest" \
            -var="frontend_image=${{ secrets.ECR_REPO_FRONTEND }}:latest"

